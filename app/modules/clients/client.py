from dataclasses import dataclass
from typing import Any, List

from .openai import OpenAIClient


@dataclass
class LLMClient:
    """
    Client class for interacting with the Language Model (LLM) service.
    """

    client_type: str = "openai"

    async def get_embeddings(self, input_data: List[Any]) -> List[List[float]]:
        """
        Get embeddings from the Language Model service.

        Args:
            input_data (LLMClientInput): Input data containing batch of text.

        Returns:
            LLMClientOutput: Embeddings generated by the Language Model.
        """
        if self.client_type != "openai":
            raise ValueError("Unsupported client type. Only OpenAI is supported as of now.")

        try:
            embeddings = await OpenAIClient().get_embeddings(input_data)
        except Exception as e:
            raise ValueError(f"Failed to get embeddings: {e}")

        return embeddings
