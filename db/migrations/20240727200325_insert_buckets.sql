-- migrate:up
INSERT INTO public.buckets (name, weight, bucket_type, status, is_llm_suggested, description) VALUES ('MAINTAINABILITY', 4, 'issue', 'active', 'f', 'Refactoring: Refactoring to improve code maintainability. \n Technical Debt: Areas where technical debt has been identified and needs to be addressed. \n Deep Nesting: Avoidance of deep nesting and overly complex functions. \n Commented Code: Code should not have commented code.');
INSERT INTO public.buckets (name, weight, bucket_type, status, is_llm_suggested, description) VALUES ('SECURITY', 5, 'issue', 'active', 'f', 'Vulnerabilities: Identifying potential security vulnerabilities (e.g., SQL injection, cross-site scripting). \n Data Privacy: Handling of sensitive data and compliance with privacy standards. \n Sensitive Information: Verify sensitive information like auth tokens, credentials should not be present in code.');
INSERT INTO public.buckets (name, weight, bucket_type, status, is_llm_suggested, description) VALUES ('DOCUMENTATION', 1, 'suggestion', 'active', 'f', 'Comments and Annotations: Quality and presence of inline comments and annotations in the code. \n API Documentation: Documentation of APIs, including function descriptions and usage examples. \n Readme and Guides: Quality and completeness of project documentation such as README files and user guides.');
INSERT INTO public.buckets (name, weight, bucket_type, status, is_llm_suggested, description) VALUES ('DOCSTRING', 1, 'suggestion', 'active', 'f', 'Function docstring missing: Verify proper docstring is present for each newly added function. \n Class docstring missing: If class docstring is missing. \n Module docstring missing: If module docstring is missing.');
INSERT INTO public.buckets (name, weight, bucket_type, status, is_llm_suggested, description) VALUES ('TESTING', 3, 'issue', 'active', 'f', 'Test Coverage: Adequacy of test coverage and identification of untested code paths. \n Test Quality: Feedback on the quality of test cases, including clarity, correctness, and thoroughness.');
INSERT INTO public.buckets (name, weight, bucket_type, status, is_llm_suggested, description) VALUES ('ARCHITECTURE', 4, 'issue', 'active', 'f', 'Design Patterns: Feedback on the use of design patterns and overall software architecture. \n Modularity: Modularity and reusability of the code. \n Extensibility: Extensibility of the codebase and its components.');
INSERT INTO public.buckets (name, weight, bucket_type, status, is_llm_suggested, description) VALUES ('DEPENDENCIES', 2, 'suggestion', 'active', 'f', 'Vulnerability through dependencies. \n Feedback around better dependency management.');
INSERT INTO public.buckets (name, weight, bucket_type, status, is_llm_suggested, description) VALUES ('ALGORITHM_EFFICIENCY', 2, 'suggestion', 'active', 'f', 'Time Complexity: Time complexity of algorithms and suggestions for optimization. \n Space Complexity: Space complexity and recommendations to reduce memory usage. \n Data Structures: Suggestions to use more efficient data structures to improve performance.');
INSERT INTO public.buckets (name, weight, bucket_type, status, is_llm_suggested, description) VALUES ('RESOURCE_MANAGEMENT', 4, 'issue', 'active', 'f', 'Memory Usage: Comments on memory allocation and suggestions to optimize memory usage. \n CPU Utilization: Feedback on CPU-intensive operations.');
INSERT INTO public.buckets (name, weight, bucket_type, status, is_llm_suggested, description) VALUES ('DATABASE_PERFORMANCE', 4, 'issue', 'active', 'f', 'Query Optimization: Efficiency of database queries and suggestions for optimization (e.g., indexing, query refactoring). \n Connection Management: Database connection handling and pooling strategies.');
INSERT INTO public.buckets (name, weight, bucket_type, status, is_llm_suggested, description) VALUES ('ERROR', 5, 'issue', 'active', 'f', 'Runtime Error: If code can produce run time errors. \n Syntax Error: If code has syntax errors. \n Logical Error: Identifying logical errors in the code that affect functionality. \n Edge Cases: Pointing out edge cases that the code does not handle properly.');
INSERT INTO public.buckets (name, weight, bucket_type, status, is_llm_suggested, description) VALUES ('CODE_ROBUSTNESS', 3, 'issue', 'active', 'f', 'Exception Handling: Examine how exceptions are handled in log messages. Avoid using generic exceptions \n and recommend proper exception handling. \n API Errors: We should have handling for downstream API errors. \n Testing: Write unit tests for new features and bug fixes. \n Fallback Mechanisms: Implement fallback mechanisms for critical operations, such as retrying failed \n requests or using default values when necessary. \n Use circuit breakers to prevent cascading failures in microservices architectures. \n Timeouts and Retries: Set reasonable timeouts for API calls to prevent hanging requests. \n Implement retry logic with exponential backoff for transient errors. \n Handle API Errors: Handle downstream API errors.');
INSERT INTO public.buckets (name, weight, bucket_type, status, is_llm_suggested, description) VALUES ('PERFORMANCE', 3, 'issue', 'active', 'f', 'Parallel calls: Ask user to execute multiple tasks parallelly if tasks are not dependent. \n Caching: Make sure code caches the frequently accessed information if the information \n is coming from downstream service APIs, databases. \n Timeout: Proper timeout should be added for API calls or any other network calls.');
INSERT INTO public.buckets (name, weight, bucket_type, status, is_llm_suggested, description) VALUES ('LOGGING', 1, 'suggestion', 'active', 'f', 'Log Level: Review the use of log levels (e.g., info, warn, error) in log messages. Verify that \n log levels accurately reflect the severity of the events being logged. \n Generic logging: Avoid generic logging and examine if the log messages include sufficient information \n for understanding the context of the logged events.');
INSERT INTO public.buckets (name, weight, bucket_type, status, is_llm_suggested, description) VALUES ('CODE_QUALITY', 3, 'issue', 'active',  'f', 'Code Style: Adherence to coding standards and style guides (e.g., naming conventions, formatting). \n Best Practices: Suggestions to follow coding best practices (e.g., DRY principle, avoiding magic numbers). \n Use HTTP methods like GET, POST, UPDATE, PATCH for their recommended use case. \n No business logic inside API controller method. \n Validate request and response using appropriate tools.');
INSERT INTO public.buckets (name, weight, bucket_type, status, is_llm_suggested, description) VALUES ('USER_STORY', 5, 'issue', 'active', 'f', 'Valid Implementation: Verify if the changes align with the user story.');
INSERT INTO public.buckets (name, weight, bucket_type, status, is_llm_suggested, description) VALUES ('READABILITY', 2, 'suggestion', 'active', 'f', 'Clarity: Clarity of the code and its readability for other developers. \n Complexity: Complexity of the code and suggestions for simplification. \n Naming Conventions: Use of clear and descriptive names for variables, functions, and classes. \n Type hint missing: Functions should have type hints for input and return types.');
INSERT INTO public.buckets (name, weight, bucket_type, status, is_llm_suggested, description) VALUES ('REUSABILITY', 3, 'issue', 'active', 'f', 'In house Libraries: Suggest user to use in house libraries wherever applicable. Our organisation uses \n certain in house libraries for python specific services, suggest user to use them in case user is using some alternate library to perform the \n same function if pr diff contains python code. \n - torpedo- It a wrapper written over sanic. for python specific code. \n - cache_wrapper - Wrapper written over redis. for python specific code. \n - mongoose - library to perform mongo operations. for python specific code. \n - tortoise_wrapper - library to perform sql operations. for python specific code. \n - openapi - for API documentation. for python specific code. \n Class and function reusability: Classes and functions should be reused for already present code.');

-- migrate:down
delete from buckets;
