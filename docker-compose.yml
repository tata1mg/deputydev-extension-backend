services:
  postgres:
    image: postgres:16
    container_name: deputydev-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: deputydev-postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d deputydev-postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis/redis-stack:latest
    container_name: deputydev-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  localstack:
    image: localstack/localstack:latest
    container_name: deputydev-localstack
    restart: unless-stopped
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3
      - DEBUG=1
      - AWS_DEFAULT_REGION=ap-south-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - LS_LOG=trace
    volumes:
      - localstack_data:/var/lib/localstack
      - "/var/run/docker.sock:/var/run/docker.sock"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:4566/_localstack/health | grep -q 'services' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  # Setup S3 bucket in LocalStack
  localstack-init:
    image: amazon/aws-cli:latest
    container_name: localstack-init
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=ap-south-1
      - AWS_ENDPOINT_URL=http://localstack:4566
    depends_on:
      localstack:
        condition: service_healthy
    command: >
      sh -c "
        aws --endpoint-url=http://localstack:4566 s3 mb s3://deputydev --region ap-south-1 || echo 'Bucket already exists';
        echo 'S3 bucket setup complete'
      "
    restart: "no"

  # If you want to run deputydev-binary inside Compose, enable this service.
  # If you already run it on your host at port 8001, you can comment this out.
  deputydev-binary:
    build:
      context: ../deputydev-binary
      dockerfile: Dockerfile
      target: runtime
    # image: deputydev-binary:local
    platform: linux/amd64
    container_name: deputydev-binary
    ports:
      - "8001:8001"
    depends_on:
      deputydev-extension-backend:
        condition: service_healthy  
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8001/ping >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  deputydev-auth:
    build:
      context: ../deputydev-auth
      dockerfile: Dockerfile
      target: runtime
      args:
        SERVICE_NAME: deputydev-auth
    platform: linux/amd64
    container_name: deputydev-auth
    ports:
      - "8085:8085"
    environment:
      - AWS_ENDPOINT_URL=http://localstack:4566
      - DATABASE_URL=postgres://postgres:password@postgres:5432/deputydev-postgres?sslmode=disable
    command: >
      sh -c "
        dbmate up &&
        python3 -m app.service
      "
    volumes:
      - ../deputydev-auth/db:/db
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8085/ping >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  deputydev-extension-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        SERVICE_NAME: deputydev-extension-backend
    platform: linux/amd64
    container_name: deputydev-extension-backend
    ports:
      - "8084:8084"
    environment:
      - AWS_ENDPOINT_URL=http://localstack:4566
      - DATABASE_URL=postgres://postgres:password@postgres:5432/deputydev-postgres?sslmode=disable
    command: >
      sh -c "
        dbmate up &&
        python3 -m app.service
      "
    volumes:
      - ./db:/db
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      localstack:
        condition: service_healthy
      deputydev-auth:
        condition: service_healthy

volumes:
  pg_data:
  redis_data:
  localstack_data: